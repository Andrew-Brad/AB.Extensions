# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# File matching patterns reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/file-matching-patterns?view=vsts
# Task catalog reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/index?view=vsts
# The dotnet CLI Task full doc with arguments: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts
# Predefined build variables: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=vsts

pool:
  vmImage: 'ubuntu-18.04' # Other images: https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent

# Build number formats: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml
name: $(date:yyyyMMdd)$(rev:.r)

variables:
  buildConfiguration: Release  
  binariesBuildDirectory: $(Build.BinariesDirectory)

steps:
- script: echo '$(Build.BuildNumber) with output path $(OutputPath)'
  displayName: 'Echo build number'

- script: dotnet restore --configfile Nuget.config
  displayName: Dotnet Restore 

- script: dotnet build --no-restore --output $(Build.BinariesDirectory) --configuration $(buildConfiguration)
  displayName: Dotnet Build

# Execute Tests using CLI Task Runner
- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: test
    projects: '**/*.Tests.csproj'
    arguments: '--configuration $(buildConfiguration)' # --logger trx added by the task
    publishTestResults: true # Optional
    nobuild: true # Optional - will cause the agent to set a --results-directory arg automagically    

# dotnet pack reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=vsts#pack-nuget-packages
- task: DotNetCoreCLI@2
  displayName: 'Pack Prerelease Package'
  inputs:
    command: 'pack'
    configuration: '$(buildConfiguration)'
    packagesToPack: './src/AB.Extensions/AB.Extensions.csproj' # Required when command == pack
    packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    nobuild: true # Optional - logs will echo a Build, when in fact the CLI assumes that the binaries are present, and will fail if they are not
    versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #arguments: '--someArg $(Build.BuildNumber)'
    buildProperties: versionSuffix=$(Build.BuildNumber) # Optional
    verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic   

# this has to be a Nuget Task and not a dotnet Task - open issue @ https://github.com/Microsoft/azure-pipelines-tasks/issues/7160
- task: NuGetCommand@2 
  displayName: 'Push prerelease NUKPG to MyGet'
  inputs:
    command: 'push'
    nuGetFeedType: external
    publishFeedCredentials: 'MyGet Trial'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/AB.Extensions.*.*.*-*.nupkg'
    verbosityPush: 'normal'

# # this has to be a Nuget Task and not a dotnet Task - open issue @ https://github.com/Microsoft/azure-pipelines-tasks/issues/7160
# - task: NuGetCommand@2
#   displayName: 'Push prerelease NUKPG to VSTS Nuget Feed'
#   inputs:
#     command: 'push'
#     nuGetFeedType: internal # currently shows a warning due to an auto-generated Nuget.config (not being linked here)
#     publishVstsFeed: 'Ab.Extensions-CI'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/AB.Extensions.*.*.*-*.nupkg'
#     verbosityPush: 'normal'
#     #packDestination: '$(Build.ArtifactStagingDirectory)' # Optional - docs also say default is $(Build.ArtifactStagingDirectory)/*.nupkg    

# This Pack command only runs on master branch and requires an override variable to be supplied (manual queueing)
- task: DotNetCoreCLI@2
  displayName: 'Pack Release Nuget Package'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),in(variables['Build.Reason'], 'Manual'))
  inputs:
    command: 'pack'
    configuration: '$(buildConfiguration)'
    packagesToPack: './src/AB.Extensions/AB.Extensions.csproj' # Required when command == pack
    packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    nobuild: true # Optional - logs will echo a Build, when in fact the CLI assumes that the binaries are present, and will fail if they are not
    versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #buildProperties: versionSuffix=$(Build.BuildNumber) # Optional
    verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic   

# This Push command only runs on master branch and requires an override variable to be supplied (manual queueing)
- task: NuGetCommand@2 
  displayName: 'Push Release Package to Nuget.org'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),in(variables['Build.Reason'], 'Manual'))
  continueOnError: true
  inputs:
    command: 'push'
    nuGetFeedType: external
    publishFeedCredentials: 'Nuget'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/AB.Extensions.?.?.?.nupkg'
    verbosityPush: 'detailed'

# Pre-requisite task(s) above for dotnet publish CLI
- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifacts'
  inputs:    
    targetPath: $(Build.ArtifactStagingDirectory)
