# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# File matching patterns reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/file-matching-patterns?view=vsts
pool:
  vmImage: 'VS2017-Win2016'

variables:
  buildConfiguration: 'Release'

# Build number formats: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml
name: $0.(date:yyyyMMdd)$(rev:.r)

steps:
- script: echo '$(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  inputs:
    command: build
    projects: '**/AB.Extensions.csproj'
    arguments: '--configuration $(buildConfiguration)'
    displayName: 'dotnet build'

# Execute Tests using CLI Task Runner
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests.csproj'
    arguments: '--configuration $(buildConfiguration)' # --no-build  (dependent on pack/publish?)
    #nobuild: true # Optional
    displayName: 'Run Unit Tests'

# dotnet pack reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=vsts#pack-nuget-packages
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    configuration: '$(buildConfiguration)'
    packagesToPack: '**/AB.Extensions.csproj' # Required when command == pack
    packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    #nobuild: true # Optional
    versioningScheme: 'byBuildNumber' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #versionEnvVar: '$(Build.BuildNumber)' # Required when versioningScheme == byEnvVar
    majorVersion: '0' # Required when versioningScheme == byPrereleaseNumber
    minorVersion: '$(date:yyyyMMdd)' # Required when versioningScheme == byPrereleaseNumber
    patchVersion: '$(rev:.r)-$(SourceBranchName)' # Required when versioningScheme == byPrereleaseNumber
    #buildProperties: # Optional
    verbosityPack: 'diagnostic' # Options: quiet, minimal, normal, detailed, diagnostic

# Build agent not finding the trx files...
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    displayName: 'Publish Test Results'

# Pre-requisite task above for dotnet publish CLI
- task: PublishPipelineArtifact@0
  inputs:
    #artifactName: 'drop'
    targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Publish Pipeline Artifacts'
