# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# File matching patterns reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/file-matching-patterns?view=vsts
# Task catalog reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/index?view=vsts
# The dotnet CLI Task full doc with arguments: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts

pool:
  vmImage: 'VS2017-Win2016'

# Build number formats: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml
name: $(date:yyyyMMdd)$(rev:.r)

variables:
  buildConfiguration: 'Release'
  artifactName: 'drop' # default value
  major: '0'
  minor: '0'
  patch: $[counter('versioncounter')]

steps:
- script: echo '$(Build.BuildNumber) with output path $(OutputPath)'
  displayName: 'Echo build number'

# - task: PowerShell@1
#   displayName: ListVariables.ps1
#   inputs:
#     scriptType: filePath
#     scriptName: "$(repo.BuildScripts)/ListVariables.ps1"
#     arguments: ''

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'    
    verbosityRestore: 'diagnostic' # Options: -, quiet, minimal, normal, detailed, diagnostic
    #arguments: '--configuration $(buildConfiguration)'    

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'
    verbosityRestore: 'normal' # Options: -, quiet, minimal, normal, detailed, diagnostic

# Execute Tests using CLI Task Runner
- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: test
    projects: '**/*.Tests.csproj'
    arguments: '--configuration $(buildConfiguration)' # --logger trx may be an assumption here that the VS build agent automatically adds this
    publishTestResults: true # Optional
    nobuild: true # Optional - will cause the agent to set a --results-directory arg automagically    

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '$(Agent.TempDirectory)/*.trx' 

# dotnet pack reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=vsts#pack-nuget-packages
- task: DotNetCoreCLI@2
  displayName: 'Pack Nuget Package'
  inputs:
    command: 'pack'
    configuration: '$(buildConfiguration)'
    packagesToPack: './src/AB.Extensions/AB.Extensions.csproj' # Required when command == pack
    packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    nobuild: true # Optional - logs will echo a Build, when in fact the CLI assumes that the binaries are present, and will fail if they are not
    versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #arguments: '--someArg $(Build.BuildNumber)'
    #versionEnvVar: '$(Build.BuildNumber)' # Required when versioningScheme == byEnvVar
    #majorVersion: '$(major)' # Required when versioningScheme == byPrereleaseNumber
    #minorVersion: '$(minor)' # Required when versioningScheme == byPrereleaseNumber
    #patchVersion: '$(patch)' # Required when versioningScheme == byPrereleaseNumber
    buildProperties: versionSuffix=$(Build.BuildNumber) # Optional
    verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic   

# this has to be a Nuget Task and not a dotnet Task - open issue @ https://github.com/Microsoft/azure-pipelines-tasks/issues/7160
- task: NuGetCommand@2 
  displayName: 'Push NUKPG to MyGet'
  inputs:
    command: 'push'
    nuGetFeedType: external
    publishFeedCredentials: 'MyGet Trial'
    versioningScheme: 'byBuildNumber'
    verbosityPush: 'detailed'    

# this has to be a Nuget Task and not a dotnet Task - open issue @ https://github.com/Microsoft/azure-pipelines-tasks/issues/7160
- task: NuGetCommand@2 
  displayName: 'Push NUKPG to VSTS Nuget Feed'
  inputs:
    command: 'push'
    nuGetFeedType: internal
    publishVstsFeed: 'Ab.Extensions-CI'
    versioningScheme: 'byBuildNumber'
    verbosityPush: 'detailed'
    #packDestination: '$(Build.ArtifactStagingDirectory)' # Optional - docs also say default is $(Build.ArtifactStagingDirectory)/*.nupkg    

# Pre-requisite task above for dotnet publish CLI
- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifacts'
  inputs:
    artifactName: $(artifactName)
    targetPath: $(Build.ArtifactStagingDirectory)

# This Push command only runs on master branch and requires an override variable to be supplied (manual queueing)
- script: echo 'Conditions met - master branch and manual build'
  displayName: 'Push to Release Package to Nuget.org'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),in(variables['Build.Reason'], 'Manual'))
# - task: DotNetCoreCLI@2
#   displayName: 'Pack Nuget Package'
#   inputs:
#     command: 'pack'
#     configuration: '$(buildConfiguration)'
#     packagesToPack: '**/AB.Extensions.csproj' # Required when command == pack
#     packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
#     nobuild: true # Optional
#     versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
#     arguments: '--version-suffix $(Build.BuildNumber)'
#     #versionEnvVar: '$(Build.BuildNumber)' # Required when versioningScheme == byEnvVar
#     #majorVersion: '$(major)' # Required when versioningScheme == byPrereleaseNumber
#     #minorVersion: '$(minor)' # Required when versioningScheme == byPrereleaseNumber
#     #patchVersion: '$(patch)' # Required when versioningScheme == byPrereleaseNumber
#     buildProperties: versionSuffix=$(Build.BuildNumber) # Optional
#     verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic 
