# This template builds .Net Core libraries with no project to project dependencies, matching standard naming conventions.
parameters:
  binariesBuildDirectory: $(Build.BinariesDirectory)
  buildConfiguration: 'Release'
  libraryProject: ''

steps:
- script: echo '$(Build.BuildNumber) with output path $(OutputPath)'
  displayName: '${{ parameters.libraryProject }} has build number $(Build.BuildNumber)'

- script: dotnet restore --configfile Nuget.config
  displayName: dotnet restore 

- script: dotnet build ./src/${{ parameters.libraryProject }}/${{ parameters.libraryProject }}.csproj --configuration ${{ parameters.buildConfiguration }} --no-restore
  displayName: dotnet build ${{ parameters.libraryProject }}

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 3.1.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Task runner gives us fancy metrics in Azure DevOps
- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: test
    projects: './test/${{ parameters.libraryProject }}.Tests/${{ parameters.libraryProject }}.Tests.csproj'
    arguments: '--configuration Debug' # --logger trx added by the task
    publishTestResults: false # Optional
    nobuild: true # Optional - will cause the agent to set a --results-directory arg automagically    

# dotnet pack reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=vsts#pack-nuget-packages
- task: DotNetCoreCLI@2
  displayName: 'Pack prerelease package: ${{ parameters.libraryProject }}'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master')) # not on master
  inputs:
    command: 'pack'
    configuration: '${{ parameters.buildConfiguration }}'
    packagesToPack: './src/${{ parameters.libraryProject }}/${{ parameters.libraryProject }}.csproj' # Required when command == pack # libraries will have csproj tags sets to true, other apps will have false
    packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    nobuild: true # Optional - logs will echo a Build, when in fact the CLI assumes that the binaries are present, and will fail if they are not
    versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    buildProperties: versionSuffix=$(Build.BuildNumber) # Optional
    verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic  

# this has to be a Nuget Task and not a dotnet Task - open issue @ https://github.com/Microsoft/azure-pipelines-tasks/issues/7160
- task: NuGetCommand@2 
  displayName: 'Push prerelease NUKPG to MyGet'
  inputs:
    command: 'push'
    nuGetFeedType: external
    publishFeedCredentials: 'MyGet Trial'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/${{ parameters.libraryProject }}.*.*.*-*.nupkg'
    verbosityPush: 'normal'

# # this has to be a Nuget Task and not a dotnet Task - open issue @ https://github.com/Microsoft/azure-pipelines-tasks/issues/7160
# - task: NuGetCommand@2
#   displayName: 'Push prerelease NUKPG to VSTS Nuget Feed'
#   inputs:
#     command: 'push'
#     nuGetFeedType: internal # currently shows a warning due to an auto-generated Nuget.config (not being linked here)
#     publishVstsFeed: 'Ab.Extensions-CI'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/AB.Extensions.*.*.*-*.nupkg'
#     verbosityPush: 'normal'
#     #packDestination: '$(Build.ArtifactStagingDirectory)' # Optional - docs also say default is $(Build.ArtifactStagingDirectory)/*.nupkg    

# This Pack command only runs on master branch and requires an override variable to be supplied (manual queueing)
- task: DotNetCoreCLI@2
  displayName: 'Pack Release Nuget Package'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),in(variables['Build.Reason'], 'Manual'))
  inputs:
    command: 'pack'
    configuration: '$(buildConfiguration)'
    packagesToPack: './src/${{ parameters.libraryProject }}/${{ parameters.libraryProject }}.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)' # Optional
    nobuild: true # Optional - logs will echo a Build, when in fact the CLI assumes that the binaries are present, and will fail if they are not
    versioningScheme: 'off' # Options: off, byPrereleaseNumber, byEnvVar, byBuildNumber
    #buildProperties: versionSuffix=$(Build.BuildNumber) # Optional
    verbosityPack: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic   

# This Push command only runs on master branch and requires an override variable to be supplied (manual queueing)
- task: NuGetCommand@2 
  displayName: 'Push Release Package to Nuget.org'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),in(variables['Build.Reason'], 'Manual'))
  continueOnError: true
  inputs:
    command: 'push'
    nuGetFeedType: external
    publishFeedCredentials: 'Nuget'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/${{ parameters.libraryProject }}.?.?.?.nupkg'
    verbosityPush: 'detailed'
